{"ast":null,"code":"import nodemailer from 'nodemailer';\nconst emailUser = process.env.REACT_APP_EMAIL_USER;\nconst emailHost = process.env.REACT_APP_EMAIL_HOST;\nconst emailPort = process.env.REACT_APP_EMAIL_PORT;\nconst emailPass = process.env.REACT_APP_EMAIL_PASS;\nconst transporter = nodemailer.createTransport({\n  host: emailHost,\n  port: emailPort,\n  auth: {\n    user: emailUser,\n    pass: emailPass\n  }\n});\nconst sendMessage = message => {\n  transporter.sendMail(message, (error, info) => {\n    if (error) {\n      console.log('Error occurred');\n      console.log(error.message);\n      return process.exit(1);\n    }\n    console.log('Message sent successfully!');\n    console.log(nodemailer.getTestMessageUrl(info));\n\n    // only needed when using pooled connections\n    transporter.close();\n  });\n};\nexport default sendMessage;","map":{"version":3,"names":["nodemailer","emailUser","process","env","REACT_APP_EMAIL_USER","emailHost","REACT_APP_EMAIL_HOST","emailPort","REACT_APP_EMAIL_PORT","emailPass","REACT_APP_EMAIL_PASS","transporter","createTransport","host","port","auth","user","pass","sendMessage","message","sendMail","error","info","console","log","exit","getTestMessageUrl","close"],"sources":["/frontend/src/services/sendEmail.js"],"sourcesContent":["import nodemailer from 'nodemailer';\n\nconst emailUser = process.env.REACT_APP_EMAIL_USER\nconst emailHost = process.env.REACT_APP_EMAIL_HOST\nconst emailPort = process.env.REACT_APP_EMAIL_PORT\nconst emailPass = process.env.REACT_APP_EMAIL_PASS\n\nconst transporter = nodemailer.createTransport({\n    host: emailHost,\n    port: emailPort,\n    auth: {\n        user: emailUser,\n        pass: emailPass\n    }\n});\n\n\nconst sendMessage = (message) => {\n    transporter.sendMail(message, (error, info) => {\n        if (error) {\n            console.log('Error occurred');\n            console.log(error.message);\n            return process.exit(1);\n        }\n        \n        console.log('Message sent successfully!');\n        console.log(nodemailer.getTestMessageUrl(info));\n        \n        // only needed when using pooled connections\n        transporter.close();\n    });\n}\nexport default sendMessage;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;AAEnC,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB;AAClD,MAAMC,SAAS,GAAGH,OAAO,CAACC,GAAG,CAACG,oBAAoB;AAClD,MAAMC,SAAS,GAAGL,OAAO,CAACC,GAAG,CAACK,oBAAoB;AAClD,MAAMC,SAAS,GAAGP,OAAO,CAACC,GAAG,CAACO,oBAAoB;AAElD,MAAMC,WAAW,GAAGX,UAAU,CAACY,eAAe,CAAC;EAC3CC,IAAI,EAAER,SAAS;EACfS,IAAI,EAAEP,SAAS;EACfQ,IAAI,EAAE;IACFC,IAAI,EAAEf,SAAS;IACfgB,IAAI,EAAER;EACV;AACJ,CAAC,CAAC;AAGF,MAAMS,WAAW,GAAIC,OAAO,IAAK;EAC7BR,WAAW,CAACS,QAAQ,CAACD,OAAO,EAAE,CAACE,KAAK,EAAEC,IAAI,KAAK;IAC3C,IAAID,KAAK,EAAE;MACPE,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7BD,OAAO,CAACC,GAAG,CAACH,KAAK,CAACF,OAAO,CAAC;MAC1B,OAAOjB,OAAO,CAACuB,IAAI,CAAC,CAAC,CAAC;IAC1B;IAEAF,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAACxB,UAAU,CAAC0B,iBAAiB,CAACJ,IAAI,CAAC,CAAC;;IAE/C;IACAX,WAAW,CAACgB,KAAK,CAAC,CAAC;EACvB,CAAC,CAAC;AACN,CAAC;AACD,eAAeT,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}